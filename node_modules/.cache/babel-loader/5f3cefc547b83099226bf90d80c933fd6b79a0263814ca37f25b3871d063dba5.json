{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst multer = require('multer');\nconst path = require('path');\n\n// Initialize Express app\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\n\n// MongoDB Connection (Compass)\nmongoose.connect('mongodb://127.0.0.1:27017/pumpGalleryDB', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected')).catch(err => console.error('MongoDB connection error:', err));\n\n// Define Pump schema\nconst pumpSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  price: {\n    type: String,\n    required: true\n  },\n  image: {\n    type: String,\n    required: true\n  } // Image filename\n});\nconst Pump = mongoose.model('Pump', pumpSchema);\n\n// Multer setup for image uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/'); // Save uploaded images in the \"uploads\" folder\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + path.extname(file.originalname)); // Unique filename\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// Serve static files (uploads folder)\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// Route: Fetch all pumps\napp.get('/api/pumps', async (req, res) => {\n  try {\n    const pumps = await Pump.find();\n    res.json({\n      success: true,\n      pumps\n    });\n  } catch (err) {\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch pumps'\n    });\n  }\n});\n\n// Route: Add a new pump (with image upload)\napp.post('/api/pumps', upload.single('image'), async (req, res) => {\n  const {\n    name,\n    price\n  } = req.body;\n  const image = req.file.filename;\n  try {\n    const newPump = new Pump({\n      name,\n      price,\n      image\n    });\n    await newPump.save();\n    res.status(201).json({\n      success: true,\n      message: 'Pump added successfully'\n    });\n  } catch (err) {\n    res.status(500).json({\n      success: false,\n      error: 'Failed to add pump'\n    });\n  }\n});\n\n// Start server\nconst port = process.env.PORT || 5001;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","bodyParser","multer","path","app","use","json","urlencoded","extended","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","pumpSchema","Schema","name","type","String","required","price","image","Pump","model","storage","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","static","join","__dirname","get","res","pumps","find","success","status","post","single","body","newPump","save","message","port","process","env","PORT","listen"],"sources":["/Users/manvirsingh/Documents/react1/project/src/home/Home.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst multer = require('multer');\nconst path = require('path');\n\n// Initialize Express app\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// MongoDB Connection (Compass)\nmongoose\n  .connect('mongodb://127.0.0.1:27017/pumpGalleryDB', {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  })\n  .then(() => console.log('MongoDB connected'))\n  .catch((err) => console.error('MongoDB connection error:', err));\n\n// Define Pump schema\nconst pumpSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  price: { type: String, required: true },\n  image: { type: String, required: true }, // Image filename\n});\n\nconst Pump = mongoose.model('Pump', pumpSchema);\n\n// Multer setup for image uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/'); // Save uploaded images in the \"uploads\" folder\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + path.extname(file.originalname)); // Unique filename\n  },\n});\nconst upload = multer({ storage });\n\n// Serve static files (uploads folder)\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// Route: Fetch all pumps\napp.get('/api/pumps', async (req, res) => {\n  try {\n    const pumps = await Pump.find();\n    res.json({ success: true, pumps });\n  } catch (err) {\n    res.status(500).json({ success: false, error: 'Failed to fetch pumps' });\n  }\n});\n\n// Route: Add a new pump (with image upload)\napp.post('/api/pumps', upload.single('image'), async (req, res) => {\n  const { name, price } = req.body;\n  const image = req.file.filename;\n\n  try {\n    const newPump = new Pump({ name, price, image });\n    await newPump.save();\n    res.status(201).json({ success: true, message: 'Pump added successfully' });\n  } catch (err) {\n    res.status(500).json({ success: false, error: 'Failed to add pump' });\n  }\n});\n\n// Start server\nconst port = process.env.PORT || 5001;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}