{"ast":null,"code":"var _jsxFileName = \"/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js\",\n  _s = $RefreshSig$();\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n\n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n\n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n\n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n\n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../css/read.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PumpDetail = () => {\n  _s();\n  const {\n    pumpId\n  } = useParams(); // Extract pumpId from URL\n  const navigate = useNavigate();\n  const [pump, setPump] = useState(null); // State to hold current pump details\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n  const [pumps, setPumps] = useState([]); // State to store the list of pumps\n\n  // Fetch the list of all pumps only once when the component mounts\n  useEffect(() => {\n    axios.get('http://localhost:5001/api/pumps').then(response => setPumps(response.data)) // Store the fetched pumps in state\n    .catch(error => console.error('Error fetching pumps:', error));\n  }, []); // Empty dependency array ensures this runs only once\n\n  // Fetch pump details based on the pumpId\n  const fetchPumpDetails = useCallback(async () => {\n    try {\n      setLoading(true); // Set loading to true when fetching data\n\n      // Fetch the current pump details\n      const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n      if (!response.ok) {\n        throw new Error('Pump not found');\n      }\n      const data = await response.json();\n      setPump(data); // Set the fetched pump data\n      setError(null); // Reset any previous errors\n    } catch (err) {\n      setError(err.message); // Set error if fetch fails\n    } finally {\n      setLoading(false); // Stop loading after data is fetched or error occurs\n    }\n  }, [pumpId]); // Dependency ensures this function updates when pumpId changes\n\n  // Call fetchPumpDetails when pumpId changes\n  useEffect(() => {\n    fetchPumpDetails();\n  }, [fetchPumpDetails]);\n\n  // Debugging logs\n  console.log('Loading:', loading);\n  console.log('Error:', error);\n  console.log('Pump Data:', pump);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 16\n    }, this); // Show loading message\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error, \". Please go back to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/home\",\n        children: \"Home page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 52\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 16\n    }, this); // Show error message\n  }\n  if (!pump) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Pump not found. Please go back to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/home\",\n        children: \"Home page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 59\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 16\n    }, this); // Fallback if no pump data\n  }\n\n  // Create an array of pump IDs in the order they appear\n  const pumpIds = pumps.map(pump => pump.id);\n\n  // Find the index of the current pump\n  const currentIndex = pumpIds.indexOf(pumpId);\n\n  // Handle navigation to the previous or next pump\n  const handleNavigation = useCallback(id => {\n    const sanitizedId = encodeURIComponent(id.trim());\n    navigate(`/pumpDetail/${sanitizedId}`);\n  }, [navigate]);\n\n  // Get the previous and next pump IDs\n  const prevPump = pumpIds[currentIndex - 1] || pumpIds[pumpIds.length - 1]; // Wrap around to the last pump\n  const nextPump = pumpIds[currentIndex + 1] || pumpIds[0]; // Wrap around to the first pump\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: pump.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001/uploads/${pump.image}`,\n        className: \"product-image\",\n        alt: pump.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"MRP:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), \" \", pump.price, \" (Inclusive of all taxes)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"features\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Features\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Array.isArray(pump.features) && pump.features.length > 0 ? pump.features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: feature\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No features available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://lallytradingcompany.onrender.com\",\n          className: \"buy-button\",\n          children: \"Send Enquiry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001/uploads/${pump.rightImage}`,\n        alt: \"Right view of pump\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-btn left-btn\",\n        onClick: () => handleNavigation(prevPump),\n        children: \"\\u2190 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-btn right-btn\",\n        onClick: () => handleNavigation(nextPump),\n        children: \"\\u2192 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 9\n  }, this);\n};\n_s(PumpDetail, \"LK/SkmApoKAkpiBNwJEFCV37POs=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PumpDetail;\nexport default PumpDetail;\nvar _c;\n$RefreshReg$(_c, \"PumpDetail\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","axios","jsxDEV","_jsxDEV","PumpDetail","_s","pumpId","navigate","pump","setPump","loading","setLoading","error","setError","pumps","setPumps","get","then","response","data","catch","console","fetchPumpDetails","fetch","ok","Error","json","err","message","log","children","fileName","_jsxFileName","lineNumber","columnNumber","href","pumpIds","map","id","currentIndex","indexOf","handleNavigation","sanitizedId","encodeURIComponent","trim","prevPump","length","nextPump","className","name","src","image","alt","price","Array","isArray","features","feature","index","rightImage","onClick","_c","$RefreshReg$"],"sources":["/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js"],"sourcesContent":["// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n      \n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n      \n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n      \n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n      \n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../css/read.css'; \nimport axios from 'axios';\n\nconst PumpDetail = () => {\n    const { pumpId } = useParams(); // Extract pumpId from URL\n    const navigate = useNavigate();\n\n    const [pump, setPump] = useState(null); // State to hold current pump details\n    const [loading, setLoading] = useState(true); // Loading state\n    const [error, setError] = useState(null); // Error state\n    const [pumps, setPumps] = useState([]); // State to store the list of pumps\n\n    // Fetch the list of all pumps only once when the component mounts\n    useEffect(() => {\n        axios.get('http://localhost:5001/api/pumps')\n            .then(response => setPumps(response.data)) // Store the fetched pumps in state\n            .catch(error => console.error('Error fetching pumps:', error));\n    }, []); // Empty dependency array ensures this runs only once\n\n    // Fetch pump details based on the pumpId\n    const fetchPumpDetails = useCallback(async () => {\n        try {\n            setLoading(true); // Set loading to true when fetching data\n\n            // Fetch the current pump details\n            const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n            if (!response.ok) {\n                throw new Error('Pump not found');\n            }\n\n            const data = await response.json();\n            setPump(data); // Set the fetched pump data\n            setError(null); // Reset any previous errors\n        } catch (err) {\n            setError(err.message); // Set error if fetch fails\n        } finally {\n            setLoading(false); // Stop loading after data is fetched or error occurs\n        }\n    }, [pumpId]); // Dependency ensures this function updates when pumpId changes\n\n    // Call fetchPumpDetails when pumpId changes\n    useEffect(() => {\n        fetchPumpDetails();\n    }, [fetchPumpDetails]);\n\n    // Debugging logs\n    console.log('Loading:', loading);\n    console.log('Error:', error);\n    console.log('Pump Data:', pump);\n\n    if (loading) {\n        return <div>Loading...</div>; // Show loading message\n    }\n\n    if (error) {\n        return <div>{error}. Please go back to the <a href=\"/home\">Home page</a>.</div>; // Show error message\n    }\n\n    if (!pump) {\n        return <div>Pump not found. Please go back to the <a href=\"/home\">Home page</a>.</div>; // Fallback if no pump data\n    }\n\n    // Create an array of pump IDs in the order they appear\n    const pumpIds = pumps.map(pump => pump.id);\n\n    // Find the index of the current pump\n    const currentIndex = pumpIds.indexOf(pumpId);\n\n    // Handle navigation to the previous or next pump\n    const handleNavigation = useCallback(\n        (id) => {\n            const sanitizedId = encodeURIComponent(id.trim());\n            navigate(`/pumpDetail/${sanitizedId}`);\n        },\n        [navigate]\n    );\n\n    // Get the previous and next pump IDs\n    const prevPump = pumpIds[currentIndex - 1] || pumpIds[pumpIds.length - 1]; // Wrap around to the last pump\n    const nextPump = pumpIds[currentIndex + 1] || pumpIds[0]; // Wrap around to the first pump\n\n    return (\n        <div className=\"body\">\n            {/* Product Description */}\n            <h1>{pump.name}</h1>\n            <div className=\"product-description\">\n                {/* Ensure image URL is correct */}\n                <img \n                    src={`http://localhost:5001/uploads/${pump.image}`} \n                    className=\"product-image\" \n                    alt={pump.name} \n                />\n                <div>\n                    <h2><strong>MRP:</strong> {pump.price} (Inclusive of all taxes)</h2>\n\n                    <div className=\"features\">\n                        <h2>Features</h2>\n                        <ul>\n                            {Array.isArray(pump.features) && pump.features.length > 0 ? (\n                                pump.features.map((feature, index) => (\n                                    <li key={index}>{feature}</li>\n                                ))\n                            ) : (\n                                <li>No features available.</li>\n                            )}\n                        </ul>\n                    </div>\n\n                    <a \n                        href=\"https://lallytradingcompany.onrender.com\" \n                        className=\"buy-button\"\n                    >\n                        Send Enquiry\n                    </a>\n                </div>\n            </div>\n\n            {/* Image for right view of the pump */}\n            <div className=\"chart\">\n                <img \n                    src={`http://localhost:5001/uploads/${pump.rightImage}`} \n                    alt=\"Right view of pump\" \n                />\n            </div>\n\n            {/* Navigation Buttons */}\n            <div className=\"navigation-buttons\">\n                <button \n                    className=\"nav-btn left-btn\"\n                    onClick={() => handleNavigation(prevPump)}\n                >\n                    &#8592; {/* Left Arrow (back) */}\n                </button>\n                <button \n                    className=\"nav-btn right-btn\"\n                    onClick={() => handleNavigation(nextPump)}\n                >\n                    &#8594; {/* Right Arrow (forward) */}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default PumpDetail;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAO,iBAAiB;AACxB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACgB,KAAK,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}