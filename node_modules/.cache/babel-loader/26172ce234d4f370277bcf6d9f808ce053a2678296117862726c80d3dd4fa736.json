{"ast":null,"code":"// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n\n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n\n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n\n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n\n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };","map":{"version":3,"names":[],"sources":["/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js"],"sourcesContent":["// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n      \n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n      \n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n      \n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n      \n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\n\n\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}