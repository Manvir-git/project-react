{"ast":null,"code":"var _jsxFileName = \"/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js\",\n  _s = $RefreshSig$();\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n\n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n\n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n\n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n\n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../css/read.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PumpDetail = () => {\n  _s();\n  const {\n    pumpId\n  } = useParams(); // Extract pumpId from URL\n  const navigate = useNavigate();\n  const [pump, setPump] = useState(null); // State to hold pump data\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  // Fetch pump details based on the pumpId\n  useEffect(() => {\n    const fetchPumpDetails = async () => {\n      try {\n        // Log the pumpId for debugging\n        console.log('Fetching details for pumpId:', pumpId);\n\n        // Call the API to fetch pump data based on the ID from the URL\n        const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n        if (!response.ok) {\n          throw new Error('Pump not found');\n        }\n        const data = await response.json();\n        console.log('Fetched pump data:', data); // Log the fetched data\n\n        setPump(data.pump); // Set the pump data from the API (data.pump)\n        setLoading(false); // Set loading to false once data is fetched\n      } catch (err) {\n        setError(err.message); // Handle error if data fetch fails\n        setLoading(false);\n      }\n    };\n    fetchPumpDetails(); // Call the function to fetch pump details\n  }, [pumpId]); // Re-run the effect when pumpId changes\n\n  // Debugging: Log loading, error, and pump data\n  console.log('Loading:', loading);\n  console.log('Error:', error);\n  console.log('Pump Data:', pump);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 16\n    }, this); // Show loading message while fetching data\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error, \". Please go back to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/products\",\n        children: \"products page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 52\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 16\n    }, this); // Show error message if pump not found\n  }\n  if (!pump) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Pump not found. Please go back to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/products\",\n        children: \"products page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 59\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 16\n    }, this); // Fallback if no pump data\n  }\n\n  // Create an array of pump IDs in the order they appear\n\n  // Find the index of the current pump\n  const currentIndex = pumpIds.indexOf(pumpId);\n\n  // Determine the previous and next pump IDs (circular navigation)\n  const prevPump = pumpIds[(currentIndex - 1 + pumpIds.length) % pumpIds.length];\n  const nextPump = pumpIds[(currentIndex + 1) % pumpIds.length];\n\n  // Function to navigate to a specific pump detail\n  const handleNavigation = id => {\n    navigate(`/pumpDetail/${id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001/uploads/${pump.image}`,\n        className: \"product-image\",\n        alt: pump.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: pump.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"MRP:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 24\n          }, this), \" \", pump.price, \" (Inclusive of all taxes)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"features\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Features\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Array.isArray(pump.features) && pump.features.length > 0 ? pump.features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: feature\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No features available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 33\n            }, this) // Fallback message if features are empty or undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://lallytradingcompany.onrender.com\",\n          className: \"buy-button\",\n          children: \"Send Enquiry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001/uploads/${pump.rightImage}`,\n        alt: \"Right view of pump\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-btn left-btn\",\n        onClick: () => handleNavigation(prevPump),\n        children: \"\\u2190 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-btn right-btn\",\n        onClick: () => handleNavigation(nextPump),\n        children: \"\\u2192 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 9\n  }, this);\n};\n_s(PumpDetail, \"zLVulxUmytRiVfuCMR4wTylbr28=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PumpDetail;\nexport default PumpDetail;\nvar _c;\n$RefreshReg$(_c, \"PumpDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","PumpDetail","_s","pumpId","navigate","pump","setPump","loading","setLoading","error","setError","fetchPumpDetails","console","log","response","fetch","ok","Error","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","href","currentIndex","pumpIds","indexOf","prevPump","length","nextPump","handleNavigation","id","className","src","image","alt","name","price","Array","isArray","features","map","feature","index","rightImage","onClick","_c","$RefreshReg$"],"sources":["/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js"],"sourcesContent":["// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n      \n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n      \n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n      \n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n      \n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../css/read.css'; \n\nconst PumpDetail = () => {\n    const { pumpId } = useParams(); // Extract pumpId from URL\n    const navigate = useNavigate();\n\n    const [pump, setPump] = useState(null); // State to hold pump data\n    const [loading, setLoading] = useState(true); // Loading state\n    const [error, setError] = useState(null); // Error state\n\n    // Fetch pump details based on the pumpId\n    useEffect(() => {\n        const fetchPumpDetails = async () => {\n            try {\n                // Log the pumpId for debugging\n                console.log('Fetching details for pumpId:', pumpId);\n\n                // Call the API to fetch pump data based on the ID from the URL\n                const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n                \n                if (!response.ok) {\n                    throw new Error('Pump not found');\n                }\n\n                const data = await response.json();\n                console.log('Fetched pump data:', data); // Log the fetched data\n\n                setPump(data.pump); // Set the pump data from the API (data.pump)\n                setLoading(false); // Set loading to false once data is fetched\n            } catch (err) {\n                setError(err.message); // Handle error if data fetch fails\n                setLoading(false);\n            }\n        };\n\n        fetchPumpDetails(); // Call the function to fetch pump details\n    }, [pumpId]); // Re-run the effect when pumpId changes\n\n    // Debugging: Log loading, error, and pump data\n    console.log('Loading:', loading);\n    console.log('Error:', error);\n    console.log('Pump Data:', pump);\n\n    if (loading) {\n        return <div>Loading...</div>; // Show loading message while fetching data\n    }\n\n    if (error) {\n        return <div>{error}. Please go back to the <a href=\"/products\">products page</a>.</div>; // Show error message if pump not found\n    }\n\n    if (!pump) {\n        return <div>Pump not found. Please go back to the <a href=\"/products\">products page</a>.</div>; // Fallback if no pump data\n    }\n\n    // Create an array of pump IDs in the order they appear\n    \n\n    // Find the index of the current pump\n    const currentIndex = pumpIds.indexOf(pumpId);\n\n    // Determine the previous and next pump IDs (circular navigation)\n    const prevPump = pumpIds[(currentIndex - 1 + pumpIds.length) % pumpIds.length];\n    const nextPump = pumpIds[(currentIndex + 1) % pumpIds.length];\n\n    // Function to navigate to a specific pump detail\n    const handleNavigation = (id) => {\n        navigate(`/pumpDetail/${id}`);\n    };\n\n    return (\n        <div className=\"body\">\n            {/* Product Description */}\n            <div className=\"product-description\">\n                {/* Ensure image URL is correct */}\n                <img \n                    src={`http://localhost:5001/uploads/${pump.image}`} \n                    className=\"product-image\" \n                    alt={pump.name} \n                />\n                <div>\n                    <h1>{pump.name}</h1>\n                    <p><strong>MRP:</strong> {pump.price} (Inclusive of all taxes)</p>\n\n                    <div className=\"features\">\n                        <h2>Features</h2>\n                        <ul>\n                            {Array.isArray(pump.features) && pump.features.length > 0 ? (\n                                pump.features.map((feature, index) => (\n                                    <li key={index}>{feature}</li>\n                                ))\n                            ) : (\n                                <li>No features available.</li> // Fallback message if features are empty or undefined\n                            )}\n                        </ul>\n                    </div>\n\n                    {/* Display other details dynamically */}\n                    {/* <div className=\"additional-info\">\n                        <p><strong>Brand:</strong> {pump.brand || 'N/A'}</p>\n                        <p><strong>Warranty:</strong> {pump.warranty || 'N/A'}</p>\n                        <p><strong>Motor Type:</strong> {pump.motorType || 'N/A'}</p>\n                        <p><strong>Voltage:</strong> {pump.voltage || 'N/A'}</p>\n                        \n                    </div> */}\n\n                    <a \n                        href=\"https://lallytradingcompany.onrender.com\" \n                        className=\"buy-button\"\n                    >\n                        Send Enquiry\n                    </a>\n                </div>\n            </div>\n\n            {/* Image for right view of the pump */}\n            <div className=\"chart\">\n                <img \n                    src={`http://localhost:5001/uploads/${pump.rightImage}`} \n                    alt=\"Right view of pump\" \n                />\n            </div>\n\n            {/* Navigation Buttons */}\n            <div className=\"navigation-buttons\">\n                <button \n                    className=\"nav-btn left-btn\"\n                    onClick={() => handleNavigation(prevPump)}\n                >\n                    &#8592; {/* Left Arrow (back) */}\n                </button>\n                <button \n                    className=\"nav-btn right-btn\"\n                    onClick={() => handleNavigation(nextPump)}\n                >\n                    &#8594; {/* Right Arrow (forward) */}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default PumpDetail;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}