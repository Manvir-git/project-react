{"ast":null,"code":"const express = require('express');\nconst path = require('path');\nconst mongoose = require('mongoose');\nconst multer = require('multer');\nconst Pump = require('..'); // MongoDB model for the Pump data\n\nconst app = express();\nconst port = 5001;\n\n// Middleware to parse incoming JSON data\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// Set up multer for image upload (store in 'uploads' folder)\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Serve static files (images) from the 'uploads' directory\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// MongoDB connection\nmongoose.connect('mongodb://localhost:27017/pumpsdb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('Connected to MongoDB')).catch(err => console.error('MongoDB connection error:', err));\n\n// Route to upload pump image\napp.post('/upload', upload.single('pumpImage'), (req, res) => {\n  const newPump = new Pump({\n    name: req.body.name,\n    price: req.body.price,\n    image: req.file.filename\n  });\n  newPump.save().then(() => res.status(201).json({\n    message: 'Pump uploaded successfully'\n  })).catch(err => res.status(500).json({\n    error: 'Failed to upload pump'\n  }));\n});\n\n// Route to fetch all pumps\napp.get('/api/pumps', (req, res) => {\n  Pump.find().then(pumps => res.json(pumps)).catch(err => res.status(500).json({\n    error: 'Failed to fetch pumps'\n  }));\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","path","mongoose","multer","Pump","app","port","use","json","urlencoded","extended","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","static","join","__dirname","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","post","single","res","newPump","name","body","price","image","save","status","message","get","find","pumps","listen"],"sources":["/Users/manvirsingh/Documents/react1/project/src/home/Home.js"],"sourcesContent":["const express = require('express');\nconst path = require('path');\nconst mongoose = require('mongoose');\nconst multer = require('multer');\nconst Pump = require('..'); // MongoDB model for the Pump data\n\nconst app = express();\nconst port = 5001;\n\n// Middleware to parse incoming JSON data\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Set up multer for image upload (store in 'uploads' folder)\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  },\n});\n\nconst upload = multer({ storage: storage });\n\n// Serve static files (images) from the 'uploads' directory\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// MongoDB connection\nmongoose.connect('mongodb://localhost:27017/pumpsdb', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((err) => console.error('MongoDB connection error:', err));\n\n// Route to upload pump image\napp.post('/upload', upload.single('pumpImage'), (req, res) => {\n  const newPump = new Pump({\n    name: req.body.name,\n    price: req.body.price,\n    image: req.file.filename,\n  });\n\n  newPump.save()\n    .then(() => res.status(201).json({ message: 'Pump uploaded successfully' }))\n    .catch((err) => res.status(500).json({ error: 'Failed to upload pump' }));\n});\n\n// Route to fetch all pumps\napp.get('/api/pumps', (req, res) => {\n  Pump.find()\n    .then(pumps => res.json(pumps))\n    .catch(err => res.status(500).json({ error: 'Failed to fetch pumps' }));\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}