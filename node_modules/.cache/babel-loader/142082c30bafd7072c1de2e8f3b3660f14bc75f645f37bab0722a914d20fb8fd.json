{"ast":null,"code":"var _jsxFileName = \"/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js\",\n  _s = $RefreshSig$();\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n\n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n\n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n\n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n\n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../css/read.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PumpDetail = () => {\n  _s();\n  const {\n    pumpId\n  } = useParams(); // Extract pumpId from URL\n  const navigate = useNavigate();\n  const [pump, setPump] = useState(null); // State to hold pump data\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n  const [pumpIds, setPumpIds] = useState([]); // State to hold list of pump IDs\n\n  // Fetch pump IDs (dynamically) from the server\n  useEffect(() => {\n    const fetchPumpIds = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/pumps');\n        if (!response.ok) {\n          throw new Error('Failed to fetch pumps');\n        }\n        const data = await response.json();\n        const ids = data.pumps.map(pump => pump.id); // Assuming each pump has an 'id' field\n        setPumpIds(ids); // Save the pump IDs to state\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchPumpIds(); // Fetch pump IDs\n  }, []); // Run only once when component mounts\n\n  // Fetch pump details based on the pumpId\n  useEffect(() => {\n    const fetchPumpDetails = async () => {\n      if (!pumpId) return; // Don't fetch if no pumpId is available\n\n      try {\n        const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n        if (!response.ok) {\n          throw new Error('Pump not found');\n        }\n        const data = await response.json();\n        setPump(data.pump); // Set the pump data from the API\n        setLoading(false); // Set loading to false once data is fetched\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    fetchPumpDetails(); // Fetch pump details\n  }, [pumpId]); // Re-run the effect when pumpId changes\n\n  // If still loading\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 16\n    }, this); // Show loading message while fetching data\n  }\n\n  // If there is an error\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error, \". Please go back to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/products\",\n        children: \"products page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 52\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If pump data is not found\n  if (!pump) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Pump not found. Please go back to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/products\",\n        children: \"products page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 59\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Find the index of the current pump in the dynamic list\n  const currentIndex = pumpIds.indexOf(pumpId);\n\n  // Determine the previous and next pump IDs (circular navigation)\n  const prevPump = pumpIds[(currentIndex - 1 + pumpIds.length) % pumpIds.length];\n  const nextPump = pumpIds[(currentIndex + 1) % pumpIds.length];\n\n  // Function to navigate to a specific pump detail\n  const handleNavigation = id => {\n    navigate(`/pumpDetail/${id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001/uploads/${pump.image}`,\n        className: \"product-image\",\n        alt: pump.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: pump.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"MRP:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 24\n          }, this), \" \", pump.price, \" (Inclusive of all taxes)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"features\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Features\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 25\n          }, this), Array.isArray(pump.features) && pump.features.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: pump.features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: feature\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No features available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 29\n          }, this) // Fallback message if features are empty or undefined\n          ]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://lallytradingcompany.onrender.com\",\n          className: \"buy-button\",\n          children: \"Send Enquiry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001/uploads/${pump.rightImage}`,\n        alt: \"Right view of pump\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-btn left-btn\",\n        onClick: () => handleNavigation(prevPump),\n        children: \"\\u2190 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-btn right-btn\",\n        onClick: () => handleNavigation(nextPump),\n        children: \"\\u2192 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 9\n  }, this);\n};\n_s(PumpDetail, \"J5GWz6N68SZf3V7UfwMNLDr2tjo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PumpDetail;\nexport default PumpDetail;\nvar _c;\n$RefreshReg$(_c, \"PumpDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","PumpDetail","_s","pumpId","navigate","pump","setPump","loading","setLoading","error","setError","pumpIds","setPumpIds","fetchPumpIds","response","fetch","ok","Error","data","json","ids","pumps","map","id","err","message","fetchPumpDetails","children","fileName","_jsxFileName","lineNumber","columnNumber","href","currentIndex","indexOf","prevPump","length","nextPump","handleNavigation","className","src","image","alt","name","price","Array","isArray","features","feature","index","rightImage","onClick","_c","$RefreshReg$"],"sources":["/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js"],"sourcesContent":["// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n      \n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n      \n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n      \n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n      \n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../css/read.css'; // Assuming you have a CSS file for styling\n\nconst PumpDetail = () => {\n    const { pumpId } = useParams(); // Extract pumpId from URL\n    const navigate = useNavigate();\n\n    const [pump, setPump] = useState(null); // State to hold pump data\n    const [loading, setLoading] = useState(true); // Loading state\n    const [error, setError] = useState(null); // Error state\n    const [pumpIds, setPumpIds] = useState([]); // State to hold list of pump IDs\n\n    // Fetch pump IDs (dynamically) from the server\n    useEffect(() => {\n        const fetchPumpIds = async () => {\n            try {\n                const response = await fetch('http://localhost:5001/api/pumps');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch pumps');\n                }\n                const data = await response.json();\n                const ids = data.pumps.map((pump) => pump.id); // Assuming each pump has an 'id' field\n                setPumpIds(ids); // Save the pump IDs to state\n            } catch (err) {\n                setError(err.message);\n                setLoading(false);\n            }\n        };\n\n        fetchPumpIds(); // Fetch pump IDs\n    }, []); // Run only once when component mounts\n\n    // Fetch pump details based on the pumpId\n    useEffect(() => {\n        const fetchPumpDetails = async () => {\n            if (!pumpId) return; // Don't fetch if no pumpId is available\n\n            try {\n                const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n                if (!response.ok) {\n                    throw new Error('Pump not found');\n                }\n                const data = await response.json();\n                setPump(data.pump); // Set the pump data from the API\n                setLoading(false); // Set loading to false once data is fetched\n            } catch (err) {\n                setError(err.message);\n                setLoading(false);\n            }\n        };\n\n        fetchPumpDetails(); // Fetch pump details\n    }, [pumpId]); // Re-run the effect when pumpId changes\n\n    // If still loading\n    if (loading) {\n        return <div>Loading...</div>; // Show loading message while fetching data\n    }\n\n    // If there is an error\n    if (error) {\n        return <div>{error}. Please go back to the <a href=\"/products\">products page</a>.</div>;\n    }\n\n    // If pump data is not found\n    if (!pump) {\n        return <div>Pump not found. Please go back to the <a href=\"/products\">products page</a>.</div>;\n    }\n\n    // Find the index of the current pump in the dynamic list\n    const currentIndex = pumpIds.indexOf(pumpId);\n\n    // Determine the previous and next pump IDs (circular navigation)\n    const prevPump = pumpIds[(currentIndex - 1 + pumpIds.length) % pumpIds.length];\n    const nextPump = pumpIds[(currentIndex + 1) % pumpIds.length];\n\n    // Function to navigate to a specific pump detail\n    const handleNavigation = (id) => {\n        navigate(`/pumpDetail/${id}`);\n    };\n\n    return (\n        <div className=\"body\">\n            {/* Product Description */}\n            <div className=\"product-description\">\n                <img \n                    src={`http://localhost:5001/uploads/${pump.image}`} \n                    className=\"product-image\" \n                    alt={pump.name} \n                />\n                <div>\n                    <h1>{pump.name}</h1>\n                    <p><strong>MRP:</strong> {pump.price} (Inclusive of all taxes)</p>\n\n                    <div className=\"features\">\n                        <h2>Features</h2>\n                        {/* Safely render features */}\n                        {Array.isArray(pump.features) && pump.features.length > 0 ? (\n                            <ul>\n                                {pump.features.map((feature, index) => (\n                                    <li key={index}>{feature}</li>\n                                ))}\n                            </ul>\n                        ) : (\n                            <p>No features available.</p> // Fallback message if features are empty or undefined\n                        )}\n                    </div>\n\n                    {/* Send enquiry button */}\n                    <a \n                        href=\"https://lallytradingcompany.onrender.com\" \n                        className=\"buy-button\"\n                    >\n                        Send Enquiry\n                    </a>\n                </div>\n            </div>\n\n            {/* Image for right view of the pump */}\n            <div className=\"chart\">\n                <img \n                    src={`http://localhost:5001/uploads/${pump.rightImage}`} \n                    alt=\"Right view of pump\" \n                />\n            </div>\n\n            {/* Navigation Buttons */}\n            <div className=\"navigation-buttons\">\n                <button \n                    className=\"nav-btn left-btn\"\n                    onClick={() => handleNavigation(prevPump)}\n                >\n                    &#8592; {/* Left Arrow (back) */}\n                </button>\n                <button \n                    className=\"nav-btn right-btn\"\n                    onClick={() => handleNavigation(nextPump)}\n                >\n                    &#8594; {/* Right Arrow (forward) */}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default PumpDetail;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAO,iBAAiB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}