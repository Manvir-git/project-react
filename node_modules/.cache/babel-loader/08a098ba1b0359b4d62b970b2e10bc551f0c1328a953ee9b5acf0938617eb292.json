{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import '../css/read.css'; // Import your custom CSS for styling\n\n// const PumpDetails = () => {\n//     const { pumpId } = useParams(); // Extract pumpId from the URL\n//     const navigate = useNavigate();\n\n//     const [pump, setPump] = useState(null); // State to hold pump data\n//     const [loading, setLoading] = useState(true); // Loading state\n//     const [error, setError] = useState(null); // Error state\n\n//     // Fetch pump details from the API by ID\n//     useEffect(() => {\n//         const fetchPumpDetails = async () => {\n//             try {\n//                 // Fetch pump details based on the ID from the URL\n//                 const response = await fetch(`http://localhost:5001/api/agpumps/${pumpId}`);\n//                 console.log(pumpId);\n//                 // If the response is not OK, throw an error\n//                 if (!response.ok) {\n//                     throw new Error('Pump not found');\n//                 }\n\n//                 const data = await response.json();\n//                 setPump(data.pump); // Set the pump data from the API response\n//                 setLoading(false); // Set loading to false once the data is fetched\n//             } catch (err) {\n//                 setError(err.message); // Handle error if fetch fails\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchPumpDetails(); // Call the function to fetch pump details\n//     }, [pumpId]); // Re-run the effect when pumpId changes\n\n//     // Debugging logs\n//     console.log('Loading:', loading);\n//     console.log('Error:', error);\n//     console.log('Pump Data:', pump);\n\n//     if (loading) {\n//         return <div>Loading...</div>; // Show loading message while fetching data\n//     }\n\n//     if (error) {\n//         return <div>{error}. Please go back to the <a href=\"/products\">products page</a>.</div>; // Show error message if pump not found\n//     }\n\n//     if (!pump) {\n//         return <div>Pump not found. Please go back to the <a href=\"/products\">products page</a>.</div>; // Fallback if no pump data\n//     }\n\n//     return (\n//         <div className=\"body\">\n//             {/* Product Description */}\n//             <div className=\"product-description\">\n//                 {/* Display the pump image */}\n//                 <img \n//                     src={`http://localhost:5001/uploads/${pump.image}`} \n//                     alt={pump.name} \n//                     className=\"product-image\" \n//                 />\n//                 <div>\n//                     <h1>{pump.name}</h1>\n//                     <p><strong>Price:</strong> {pump.price} (Inclusive of all taxes)</p>\n\n//                     <div className=\"features\">\n//                         <h2>Features</h2>\n//                         <ul>\n//                             {Array.isArray(pump.features) && pump.features.length > 0 ? (\n//                                 pump.features.map((feature, index) => (\n//                                     <li key={index}>{feature}</li>\n//                                 ))\n//                             ) : (\n//                                 <li>No features available.</li> // Fallback message if features are empty or undefined\n//                             )}\n//                         </ul>\n//                     </div>\n\n//                     {/* Send Enquiry Button */}\n//                     <a \n//                         href=\"https://lallytradingcompany.onrender.com\" \n//                         className=\"buy-button\"\n//                     >\n//                         Send Enquiry\n//                     </a>\n//                 </div>\n//             </div>\n\n//             {/* Optional: Display additional pump details */}\n//             {pump.rightImage && (\n//                 <div className=\"chart\">\n//                     <h3>Technical Details</h3>\n//                     <img \n//                         src={`http://localhost:5001/uploads/${pump.rightImage}`} \n//                         alt=\"Right view of pump\" \n//                         className=\"product-image\" \n//                     />\n//                 </div>\n//             )}\n\n//             {/* Navigation Button to go back */}\n//             <div className=\"navigation-buttons\">\n//                 <button \n//                     className=\"nav-btn left-btn\"\n//                     onClick={() => navigate('/products')} // Navigate back to product list\n//                 >\n//                     &#8592; Back to Product List\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default PumpDetails;","map":{"version":3,"names":[],"sources":["/Users/manvirsingh/Documents/react1/project/src/components/PumpDetails.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import '../css/read.css'; // Import your custom CSS for styling\n\n// const PumpDetails = () => {\n//     const { pumpId } = useParams(); // Extract pumpId from the URL\n//     const navigate = useNavigate();\n\n//     const [pump, setPump] = useState(null); // State to hold pump data\n//     const [loading, setLoading] = useState(true); // Loading state\n//     const [error, setError] = useState(null); // Error state\n\n//     // Fetch pump details from the API by ID\n//     useEffect(() => {\n//         const fetchPumpDetails = async () => {\n//             try {\n//                 // Fetch pump details based on the ID from the URL\n//                 const response = await fetch(`http://localhost:5001/api/agpumps/${pumpId}`);\n//                 console.log(pumpId);\n//                 // If the response is not OK, throw an error\n//                 if (!response.ok) {\n//                     throw new Error('Pump not found');\n//                 }\n\n//                 const data = await response.json();\n//                 setPump(data.pump); // Set the pump data from the API response\n//                 setLoading(false); // Set loading to false once the data is fetched\n//             } catch (err) {\n//                 setError(err.message); // Handle error if fetch fails\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchPumpDetails(); // Call the function to fetch pump details\n//     }, [pumpId]); // Re-run the effect when pumpId changes\n\n//     // Debugging logs\n//     console.log('Loading:', loading);\n//     console.log('Error:', error);\n//     console.log('Pump Data:', pump);\n\n//     if (loading) {\n//         return <div>Loading...</div>; // Show loading message while fetching data\n//     }\n\n//     if (error) {\n//         return <div>{error}. Please go back to the <a href=\"/products\">products page</a>.</div>; // Show error message if pump not found\n//     }\n\n//     if (!pump) {\n//         return <div>Pump not found. Please go back to the <a href=\"/products\">products page</a>.</div>; // Fallback if no pump data\n//     }\n\n//     return (\n//         <div className=\"body\">\n//             {/* Product Description */}\n//             <div className=\"product-description\">\n//                 {/* Display the pump image */}\n//                 <img \n//                     src={`http://localhost:5001/uploads/${pump.image}`} \n//                     alt={pump.name} \n//                     className=\"product-image\" \n//                 />\n//                 <div>\n//                     <h1>{pump.name}</h1>\n//                     <p><strong>Price:</strong> {pump.price} (Inclusive of all taxes)</p>\n\n//                     <div className=\"features\">\n//                         <h2>Features</h2>\n//                         <ul>\n//                             {Array.isArray(pump.features) && pump.features.length > 0 ? (\n//                                 pump.features.map((feature, index) => (\n//                                     <li key={index}>{feature}</li>\n//                                 ))\n//                             ) : (\n//                                 <li>No features available.</li> // Fallback message if features are empty or undefined\n//                             )}\n//                         </ul>\n//                     </div>\n\n//                     {/* Send Enquiry Button */}\n//                     <a \n//                         href=\"https://lallytradingcompany.onrender.com\" \n//                         className=\"buy-button\"\n//                     >\n//                         Send Enquiry\n//                     </a>\n//                 </div>\n//             </div>\n\n//             {/* Optional: Display additional pump details */}\n//             {pump.rightImage && (\n//                 <div className=\"chart\">\n//                     <h3>Technical Details</h3>\n//                     <img \n//                         src={`http://localhost:5001/uploads/${pump.rightImage}`} \n//                         alt=\"Right view of pump\" \n//                         className=\"product-image\" \n//                     />\n//                 </div>\n//             )}\n\n//             {/* Navigation Button to go back */}\n//             <div className=\"navigation-buttons\">\n//                 <button \n//                     className=\"nav-btn left-btn\"\n//                     onClick={() => navigate('/products')} // Navigate back to product list\n//                 >\n//                     &#8592; Back to Product List\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default PumpDetails;\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}