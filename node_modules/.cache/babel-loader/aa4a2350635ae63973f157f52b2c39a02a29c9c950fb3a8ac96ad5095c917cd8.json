{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import '../css/read.css'; // Import custom CSS for styling\n// import axios from 'axios';\n// const PumpDetails = () => {\n//     const { pumpId } = useParams(); // Extract pumpId from URL\n//     const navigate = useNavigate();\n\n//     const [pump, setPump] = useState(null); // State to hold pump data\n//     const [loading, setLoading] = useState(true); // Loading state\n//     const [error, setError] = useState(null); // Error state\n\n//     const [pumps, setPumps] = useState([]); // State for list of pump IDs\n\n//     useEffect(() => {\n//         // Fetch pumps data from your API\n//         axios.get('http://localhost:5001/api/agpumps')\n//           .then(response => setPumps(response.data)) // Store the fetched pumps in state\n//           .catch(error => console.error('Error fetching pumps:', error));\n//       }, []);\n\n//       // Fetch pump details based on the pumpId\n//       useEffect(() => {\n//           const fetchPumpDetails = async () => {\n//               try {\n//                   // Log the pumpId for debugging\n//                   console.log('Fetching details for pumpId:', pumpId);\n\n//                   // Call the API to fetch pump data based on the ID from the URL\n//                   const response = await fetch(`http://localhost:5001/api/agpumps/${pumpId}`);\n\n//                   if (!response.ok) {\n//                       throw new Error('Pump not found');\n//                   }\n\n//                   const data = await response.json();\n//                   console.log('Fetched pump data:', data); // Log the fetched data\n\n//                   setPump(data); // Use correct data structure (no need for data.pump if it's directly returned)\n//                   setLoading(false); // Set loading to false once data is fetched\n//               } catch (err) {\n//                   setError(err.message); // Handle error if data fetch fails\n//                   setLoading(false);\n//               }\n//           };\n\n//           fetchPumpDetails(); // Call the function to fetch pump details\n//       }, [pumpId]); // Re-run the effect when pumpId changes\n\n//       // Debugging: Log loading, error, and pump data\n//       console.log('Loading:', loading);\n//       console.log('Error:', error);\n//       console.log('Pump Data:', pump);\n\n//       if (loading) {\n//           return <div>Loading...</div>; // Show loading message while fetching data\n//       }\n\n//       if (error) {\n//           return <div>{error}. Please go back to the <a href=\"/products\">products page</a>.</div>; // Show error message if pump not found\n//       }\n\n//       if (!pump) {\n//           return <div>Pump not found. Please go back to the <a href=\"/products\">products page</a>.</div>; // Fallback if no pump data\n//       }\n\n//       // Create an array of pump IDs in the order they appear\n//       const pumpIds = pumps.map(pump => pump.id);\n\n//       // Find the index of the current pump\n//       const currentIndex = pumpIds.indexOf(pumpId);\n\n//       // Handle navigation to the previous or next pump\n//       const handleNavigation = (id) => {\n//         navigate(`/pumpDetails/${id}`);\n//       };\n\n//       // Get the previous and next pump IDs\n//       const prevPump = pumpIds[currentIndex - 1] || pumpIds[pumpIds.length - 1]; // Wrap around to the last pump\n//       const nextPump = pumpIds[currentIndex + 1] || pumpIds[0]; // Wrap around to the first pump\n\n//     return (\n//         <div className=\"body\">\n//             {/* Product Description */}\n//             <div className=\"product-description\">\n//                 {/* Ensure image URL is correct */}\n//                 <img \n//                     src={`http://localhost:5001/uploads/${pump.image}`} \n//                     className=\"product-image\" \n//                     alt={pump.name} \n//                 />\n//                 <div>\n//                     <h1>{pump.name}</h1>\n//                     <p><strong>MRP:</strong> {pump.price} (Inclusive of all taxes)</p>\n\n//                     <div className=\"features\">\n//                         <h2>Features</h2>\n//                         <ul>\n//                             {Array.isArray(pump.features) && pump.features.length > 0 ? (\n//                                 pump.features.map((feature, index) => (\n//                                     <li key={index}>{feature}</li>\n//                                 ))\n//                             ) : (\n//                                 <li>No features available.</li> // Fallback message if features are empty or undefined\n//                             )}\n//                         </ul>\n//                     </div>\n\n//                     <a \n//                         href=\"https://lallytradingcompany.onrender.com\" \n//                         className=\"buy-button\"\n//                     >\n//                         Send Enquiry\n//                     </a>\n//                 </div>\n//             </div>\n\n//             {/* Image for right view of the pump */}\n//             <div className=\"chart\">\n//                 <img \n//                     src={`http://localhost:5001/uploads/${pump.rightImage}`} \n//                     alt=\"Right view of pump\" \n//                 />\n//             </div>\n\n//             {/* Navigation Buttons */}\n//             <div className=\"navigation-buttons\">\n//         <button \n//           className=\"nav-btn left-btn\"\n//           onClick={() => handleNavigation(prevPump)}\n//         >\n//           &#8592; {/* Left Arrow (back) */}\n//         </button>\n//         <button \n//           className=\"nav-btn right-btn\"\n//           onClick={() => handleNavigation(nextPump)}\n//         >\n//           &#8594; {/* Right Arrow (forward) */}\n//         </button>\n//       </div>\n//         </div>\n//     );\n// };\n\n// export default PumpDetails;","map":{"version":3,"names":[],"sources":["/Users/manvirsingh/Documents/react1/project/src/components/PumpDetails.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import '../css/read.css'; // Import custom CSS for styling\n// import axios from 'axios';\n// const PumpDetails = () => {\n//     const { pumpId } = useParams(); // Extract pumpId from URL\n//     const navigate = useNavigate();\n\n//     const [pump, setPump] = useState(null); // State to hold pump data\n//     const [loading, setLoading] = useState(true); // Loading state\n//     const [error, setError] = useState(null); // Error state\n    \n//     const [pumps, setPumps] = useState([]); // State for list of pump IDs\n\n//     useEffect(() => {\n//         // Fetch pumps data from your API\n//         axios.get('http://localhost:5001/api/agpumps')\n//           .then(response => setPumps(response.data)) // Store the fetched pumps in state\n//           .catch(error => console.error('Error fetching pumps:', error));\n//       }, []);\n  \n  \n//       // Fetch pump details based on the pumpId\n//       useEffect(() => {\n//           const fetchPumpDetails = async () => {\n//               try {\n//                   // Log the pumpId for debugging\n//                   console.log('Fetching details for pumpId:', pumpId);\n  \n//                   // Call the API to fetch pump data based on the ID from the URL\n//                   const response = await fetch(`http://localhost:5001/api/agpumps/${pumpId}`);\n                  \n//                   if (!response.ok) {\n//                       throw new Error('Pump not found');\n//                   }\n  \n//                   const data = await response.json();\n//                   console.log('Fetched pump data:', data); // Log the fetched data\n  \n//                   setPump(data); // Use correct data structure (no need for data.pump if it's directly returned)\n//                   setLoading(false); // Set loading to false once data is fetched\n//               } catch (err) {\n//                   setError(err.message); // Handle error if data fetch fails\n//                   setLoading(false);\n//               }\n//           };\n  \n//           fetchPumpDetails(); // Call the function to fetch pump details\n//       }, [pumpId]); // Re-run the effect when pumpId changes\n  \n//       // Debugging: Log loading, error, and pump data\n//       console.log('Loading:', loading);\n//       console.log('Error:', error);\n//       console.log('Pump Data:', pump);\n  \n//       if (loading) {\n//           return <div>Loading...</div>; // Show loading message while fetching data\n//       }\n  \n//       if (error) {\n//           return <div>{error}. Please go back to the <a href=\"/products\">products page</a>.</div>; // Show error message if pump not found\n//       }\n  \n//       if (!pump) {\n//           return <div>Pump not found. Please go back to the <a href=\"/products\">products page</a>.</div>; // Fallback if no pump data\n//       }\n  \n//       // Create an array of pump IDs in the order they appear\n//       const pumpIds = pumps.map(pump => pump.id);\n  \n//       // Find the index of the current pump\n//       const currentIndex = pumpIds.indexOf(pumpId);\n    \n//       // Handle navigation to the previous or next pump\n//       const handleNavigation = (id) => {\n//         navigate(`/pumpDetails/${id}`);\n//       };\n    \n//       // Get the previous and next pump IDs\n//       const prevPump = pumpIds[currentIndex - 1] || pumpIds[pumpIds.length - 1]; // Wrap around to the last pump\n//       const nextPump = pumpIds[currentIndex + 1] || pumpIds[0]; // Wrap around to the first pump\n\n\n\n//     return (\n//         <div className=\"body\">\n//             {/* Product Description */}\n//             <div className=\"product-description\">\n//                 {/* Ensure image URL is correct */}\n//                 <img \n//                     src={`http://localhost:5001/uploads/${pump.image}`} \n//                     className=\"product-image\" \n//                     alt={pump.name} \n//                 />\n//                 <div>\n//                     <h1>{pump.name}</h1>\n//                     <p><strong>MRP:</strong> {pump.price} (Inclusive of all taxes)</p>\n\n//                     <div className=\"features\">\n//                         <h2>Features</h2>\n//                         <ul>\n//                             {Array.isArray(pump.features) && pump.features.length > 0 ? (\n//                                 pump.features.map((feature, index) => (\n//                                     <li key={index}>{feature}</li>\n//                                 ))\n//                             ) : (\n//                                 <li>No features available.</li> // Fallback message if features are empty or undefined\n//                             )}\n//                         </ul>\n//                     </div>\n\n//                     <a \n//                         href=\"https://lallytradingcompany.onrender.com\" \n//                         className=\"buy-button\"\n//                     >\n//                         Send Enquiry\n//                     </a>\n//                 </div>\n//             </div>\n\n//             {/* Image for right view of the pump */}\n//             <div className=\"chart\">\n//                 <img \n//                     src={`http://localhost:5001/uploads/${pump.rightImage}`} \n//                     alt=\"Right view of pump\" \n//                 />\n//             </div>\n\n//             {/* Navigation Buttons */}\n//             <div className=\"navigation-buttons\">\n//         <button \n//           className=\"nav-btn left-btn\"\n//           onClick={() => handleNavigation(prevPump)}\n//         >\n//           &#8592; {/* Left Arrow (back) */}\n//         </button>\n//         <button \n//           className=\"nav-btn right-btn\"\n//           onClick={() => handleNavigation(nextPump)}\n//         >\n//           &#8594; {/* Right Arrow (forward) */}\n//         </button>\n//       </div>\n//         </div>\n//     );\n// };\n\n// export default PumpDetails;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}