{"ast":null,"code":"var _jsxFileName = \"/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js\",\n  _s = $RefreshSig$();\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n\n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n\n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n\n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n\n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n\n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../css/read.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PumpDetail = () => {\n  _s();\n  const {\n    pumpId\n  } = useParams(); // Extract pumpId from URL\n  const navigate = useNavigate();\n  const [pump, setPump] = useState(null); // State to hold pump data\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  const [pumps, setPumps] = useState([]); // State to store the pump data\n\n  useEffect(() => {\n    // Fetch pumps data from your API\n    axios.get('http://localhost:5001/api/pumps').then(response => setPumps(response.data)) // Store the fetched pumps in state\n    .catch(error => console.error('Error fetching pumps:', error));\n  }, []);\n\n  // Fetch pump details based on the pumpId\n  useEffect(() => {\n    const fetchPumpDetails = async () => {\n      try {\n        // Log the pumpId for debugging\n        console.log('Fetching details for pumpId:', pumpId);\n\n        // Call the API to fetch pump data based on the ID from the URL\n        const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n        if (!response.ok) {\n          throw new Error('Pump not found');\n        }\n        const data = await response.json();\n        console.log('Fetched pump data:', data); // Log the fetched data\n\n        setPump(data); // Use correct data structure (no need for data.pump if it's directly returned)\n        setLoading(false); // Set loading to false once data is fetched\n      } catch (err) {\n        setError(err.message); // Handle error if data fetch fails\n        setLoading(false);\n      }\n    };\n    fetchPumpDetails(); // Call the function to fetch pump details\n  }, [pumpId]); // Re-run the effect when pumpId changes\n\n  // Debugging: Log loading, error, and pump data\n  console.log('Loading:', loading);\n  console.log('Error:', error);\n  console.log('Pump Data:', pump);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 16\n    }, this); // Show loading message while fetching data\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [error, \". Please go back to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/home\",\n        children: \"Home page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 52\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 16\n    }, this); // Show error message if pump not found\n  }\n  if (!pump) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Pump not found. Please go back to the \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/home\",\n        children: \"Home page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 59\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 16\n    }, this); // Fallback if no pump data\n  }\n\n  // Create an array of pump IDs in the order they appear\n  const pumpIds = pumps.map(pump => pump.id);\n\n  // Find the index of the current pump\n  const currentIndex = pumpIds.indexOf(pumpId);\n\n  // Handle navigation to the previous or next pump\n  const handleNavigation = id => {\n    const sanitizedId = encodeURIComponent(id.trim());\n    navigate(`/pumpDetail/${sanitizedId}`);\n  };\n\n  // Get the previous and next pump IDs\n  const prevPump = pumpIds[currentIndex - 1] || pumpIds[pumpIds.length - 1]; // Wrap around to the last pump\n  const nextPump = pumpIds[currentIndex + 1] || pumpIds[0]; // Wrap around to the first pump\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: pump.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-description\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001/uploads/${pump.image}`,\n        className: \"product-image\",\n        alt: pump.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"MRP:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this), \" \", pump.price, \" (Inclusive of all taxes)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"features\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Features\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Array.isArray(pump.features) && pump.features.length > 0 ? pump.features.map((feature, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: feature\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No features available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 33\n            }, this) // Fallback message if features are empty or undefined\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://lallytradingcompany.onrender.com\",\n          className: \"buy-button\",\n          children: \"Send Enquiry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:5001/uploads/${pump.rightImage}`,\n        alt: \"Right view of pump\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-btn left-btn\",\n        onClick: () => handleNavigation(prevPump),\n        children: \"\\u2190 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-btn right-btn\",\n        onClick: () => handleNavigation(nextPump),\n        children: \"\\u2192 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 9\n  }, this);\n};\n_s(PumpDetail, \"KRaTxVCDgCmV22LanDv8gLan1tA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PumpDetail;\nexport default PumpDetail;\nvar _c;\n$RefreshReg$(_c, \"PumpDetail\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","jsxDEV","_jsxDEV","PumpDetail","_s","pumpId","navigate","pump","setPump","loading","setLoading","error","setError","pumps","setPumps","get","then","response","data","catch","console","fetchPumpDetails","log","fetch","ok","Error","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","href","pumpIds","map","id","currentIndex","indexOf","handleNavigation","sanitizedId","encodeURIComponent","trim","prevPump","length","nextPump","className","name","src","image","alt","price","Array","isArray","features","feature","index","rightImage","onClick","_c","$RefreshReg$"],"sources":["/Users/manvirsingh/Documents/react1/project/src/components/PumpDetail.js"],"sourcesContent":["// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok && data.success) {\n//           setPump(data.pump);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto' }}\n//       />\n//       <p><strong>Price:</strong> ${pump.price}</p>\n      \n//       <h3>Features:</h3>\n//       <ul>\n//         {pump.features && pump.features.length > 0 ? (\n//           pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))\n//         ) : (\n//           <p>No features available for this pump.</p>\n//         )}\n//       </ul>\n      \n//       {/* Optional: Add a back button */}\n//       <button onClick={() => window.history.back()} style={{ marginTop: '20px' }}>\n//         Back to Pump List\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default PumpDetail;\n\n\n\n// // src/components/PumpDetail.js\n// import React, { useState, useEffect } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n\n// const PumpDetail = () => {\n//   const { pumpId } = useParams(); // Grab the pumpId from the URL parameters\n//   const [pump, setPump] = useState(null);\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchPumpDetails = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n//         const data = await response.json();\n        \n//         if (response.ok) {\n//           setPump(data);\n//         } else {\n//           setError('Pump not found or an error occurred.');\n//         }\n//       } catch (error) {\n//         setError('Failed to fetch pump details.');\n//       } finally {\n//         setLoading(false); // Set loading to false once the request is complete\n//       }\n//     };\n\n//     fetchPumpDetails();\n//   }, [pumpId]);\n\n//   // Handle loading, error, and displaying pump details\n//   if (loading) {\n//     return <p>Loading...</p>;\n//   }\n\n//   if (error) {\n//     return <p>{error}</p>;\n//   }\n\n//   if (!pump) {\n//     return <p>Pump details not available.</p>;\n//   }\n\n//   return (\n//     <div className=\"pump-detail\">\n//       <h1>{pump.name}</h1>\n\n//       {/* Display Pump Image */}\n//       <img\n//         src={`http://localhost:5001/uploads/${pump.image}`}\n//         alt={pump.name}\n//         style={{ width: '100%', height: 'auto', maxWidth: '500px', marginBottom: '20px' }}\n//       />\n\n//       {/* Pump Details */}\n//       <p><strong>Price:</strong> {pump.price}</p>\n      \n//       {pump.rightImage && (\n//         <div style={{ margin: '20px 0' }}>\n//           <strong>Technical Details:</strong>\n//           <img\n//             src={`http://localhost:5001/uploads/${pump.rightImage}`}\n//             alt=\"Technical Details\"\n//             style={{ width: '100%', height: 'auto', maxWidth: '500px' }}\n//           />\n//         </div>\n//       )}\n      \n//       {/* Features List */}\n//       <h3>Features:</h3>\n//       {pump.features && pump.features.length > 0 ? (\n//         <ul>\n//           {pump.features.map((feature, idx) => (\n//             <li key={idx}>{feature}</li>\n//           ))}\n//         </ul>\n//       ) : (\n//         <p>No features available for this pump.</p>\n//       )}\n\n//       {/* Optional: Add a back button */}\n//       <Link to=\"/\" style={{ marginTop: '20px', display: 'inline-block', textDecoration: 'none', color: '#007bff' }}>\n//         Back to Pump List\n//       </Link>\n//     </div>\n//   );\n// };\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../css/read.css'; \nimport axios from 'axios';\n\nconst PumpDetail = () => {\n    const { pumpId } = useParams(); // Extract pumpId from URL\n    const navigate = useNavigate();\n\n    const [pump, setPump] = useState(null); // State to hold pump data\n    const [loading, setLoading] = useState(true); // Loading state\n    const [error, setError] = useState(null); // Error state\n    \n    const [pumps, setPumps] = useState([]); // State to store the pump data\n    \n    useEffect(() => {\n      // Fetch pumps data from your API\n      axios.get('http://localhost:5001/api/pumps')\n        .then(response => setPumps(response.data)) // Store the fetched pumps in state\n        .catch(error => console.error('Error fetching pumps:', error));\n    }, []);\n\n\n    // Fetch pump details based on the pumpId\n    useEffect(() => {\n        const fetchPumpDetails = async () => {\n            try {\n                // Log the pumpId for debugging\n                console.log('Fetching details for pumpId:', pumpId);\n\n                // Call the API to fetch pump data based on the ID from the URL\n                const response = await fetch(`http://localhost:5001/api/pumps/${pumpId}`);\n                \n                if (!response.ok) {\n                    throw new Error('Pump not found');\n                }\n\n                const data = await response.json();\n                console.log('Fetched pump data:', data); // Log the fetched data\n\n                setPump(data); // Use correct data structure (no need for data.pump if it's directly returned)\n                setLoading(false); // Set loading to false once data is fetched\n            } catch (err) {\n                setError(err.message); // Handle error if data fetch fails\n                setLoading(false);\n            }\n        };\n\n        fetchPumpDetails(); // Call the function to fetch pump details\n    }, [pumpId]); // Re-run the effect when pumpId changes\n\n    // Debugging: Log loading, error, and pump data\n    console.log('Loading:', loading);\n    console.log('Error:', error);\n    console.log('Pump Data:', pump);\n\n    if (loading) {\n        return <div>Loading...</div>; // Show loading message while fetching data\n    }\n\n    if (error) {\n        return <div>{error}. Please go back to the <a href=\"/home\">Home page</a>.</div>; // Show error message if pump not found\n    }\n\n    if (!pump) {\n        return <div>Pump not found. Please go back to the <a href=\"/home\">Home page</a>.</div>; // Fallback if no pump data\n    }\n\n    // Create an array of pump IDs in the order they appear\n    const pumpIds = pumps.map(pump => pump.id);\n\n    // Find the index of the current pump\n    const currentIndex = pumpIds.indexOf(pumpId);\n  \n    // Handle navigation to the previous or next pump\n    const handleNavigation = (id) => {\n        const sanitizedId = encodeURIComponent(id.trim());\n        navigate(`/pumpDetail/${sanitizedId}`);\n    };\n  \n    // Get the previous and next pump IDs\n    const prevPump = pumpIds[currentIndex - 1] || pumpIds[pumpIds.length - 1]; // Wrap around to the last pump\n    const nextPump = pumpIds[currentIndex + 1] || pumpIds[0]; // Wrap around to the first pump\n  \n\n    return (\n        <div className=\"body\">\n            {/* Product Description */}\n            <h1>{pump.name}</h1>\n            <div className=\"product-description\">\n                {/* Ensure image URL is correct */}\n                <img \n                    src={`http://localhost:5001/uploads/${pump.image}`} \n                    className=\"product-image\" \n                    alt={pump.name} \n                />\n                <div>\n                    \n                    <h2><strong>MRP:</strong> {pump.price} (Inclusive of all taxes)</h2>\n\n                    <div className=\"features\">\n                        <h2>Features</h2>\n                        <ul>\n                            {Array.isArray(pump.features) && pump.features.length > 0 ? (\n                                pump.features.map((feature, index) => (\n                                    <li key={index}>{feature}</li>\n                                ))\n                            ) : (\n                                <li>No features available.</li> // Fallback message if features are empty or undefined\n                            )}\n                        </ul>\n                    </div>\n\n                    <a \n                        href=\"https://lallytradingcompany.onrender.com\" \n                        className=\"buy-button\"\n                    >\n                        Send Enquiry\n                    </a>\n                </div>\n            </div>\n\n            {/* Image for right view of the pump */}\n            <div className=\"chart\">\n                <img \n                    src={`http://localhost:5001/uploads/${pump.rightImage}`} \n                    alt=\"Right view of pump\" \n                />\n            </div>\n\n            {/* Navigation Buttons */}\n            <div className=\"navigation-buttons\">\n        <button \n          className=\"nav-btn left-btn\"\n          onClick={() => handleNavigation(prevPump)}\n        >\n          &#8592; {/* Left Arrow (back) */}\n        </button>\n        <button \n          className=\"nav-btn right-btn\"\n          onClick={() => handleNavigation(nextPump)}\n        >\n          &#8594; {/* Right Arrow (forward) */}\n        </button>\n      </div>\n        </div>\n    );\n};\n\nexport default PumpDetail;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAO,iBAAiB;AACxB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}